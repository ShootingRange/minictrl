# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: QueryRoot
    mutation: Mutation
}

type Match {
    id: UUID!
    maps: [String!]!
    minPlayerToReady: Int!
    numMaps: Int!
    playersPerTeam: Int!
    server: Server
    skipVeto: Boolean!
    spectators: [Spectator!]!
    team1: Team!
    team1Score: Int
    team2: Team!
    team2Score: Int
    vetoFirst: SideType!
}

type Mutation {
    addPlayers(players: [UUID!]!, team: UUID!): [Player!]!
    """

    Add a spectator to a match

    @return: true if the spectator was not already attached to the match
    """
    attachSpectators(match: UUID!, spectators: [UUID!]!): [Boolean!]!
    createMatch(maps: [String!]!, minPlayerToReady: Int!, numMaps: Int!, playersPerTeam: Int!, server: UUID, skipVeto: Boolean!, spectators: [UUID!]!, team1: UUID!, team2: UUID!, vetoFirst: SideType!): Server!
    createServer(host: String!, port: Int!, rconPassword: String!, type: String): Server!
    createSpectator(name: String!, steamid: String!): Spectator!
    createTeam(country: String, logo: String, name: String!): Team!
    deleteMatches(id: [UUID!]!): Server!
    deleteServers(id: [UUID!]!): Server!
    deleteSpectators(steamid: [String!]!): Spectator!
    deleteTeams(id: [UUID!]!): Team!
    """

    Removes a spectator from a match

    @return: true if the spectator was not already detached from the match
    """
    detachSpectators(match: UUID!, spectators: [UUID!]!): [Boolean!]!
    removePlayers(players: [UUID!]!, team: UUID!): [Player!]!
    setMapListForMatch(maps: [String!]!, match: UUID!): Boolean!
    updatePlayer(name: String!, steamid: String!, tag: String, team: UUID!): Player!
    updateServer(host: String!, id: UUID!, port: Int!, rconPassword: String!, type: String): Server!
    updateTeam(country: String, id: UUID!, logo: String, name: String!): Team!
}

type Player {
    name: String
    steamid: String!
    tag: String
}

type QueryRoot {
    match(ids: [UUID!]!): [Match!]!
    players(ids: [UUID!]!): [Player!]!
    servers(ids: [UUID!]!): [Server!]!
    spectators(ids: [UUID!]!): [Spectator!]!
    teams(ids: [UUID!]!): [Team!]!
}

type Server {
    host: String!
    id: UUID!
    port: Int!
    rconPassword: String!
    type: String
}

type Spectator {
    name: String
    steamid: String!
}

type Team {
    country: String
    id: UUID!
    logo: String
    name: String!
    players: [Player!]!
}

enum SideType {
    always_knife
    never_knife
    standard
}


scalar UUID